branch () 
{ 
    if [ $# -lt 2 ] || [ $# -gt 3 ]; then
        echo "Invalid arguments supplied: <user alias><user branch>[<local branch>]";
        return 0;
    fi;
    repository=$(basename -s .git `git config --get remote.origin.url`);
    localbranch=${2};
    if [ $# -gt 2 ]; then
        localbranch=${3};
    fi;
    git fetch git@github.com:${1}/${repository}.git ${2};
    git branch ${localbranch} FETCH_HEAD;
    git checkout ${localbranch}
}

btag () 
{ 
    if [ $# -ne 2 ]; then
        if [ $# -ne 1 ]; then
            echo "Invalid arguments supplied: <tag name><branch name>";
            return 0;
        fi;
    fi;
    branchname=${2};
    if [ -z "$branchname" ]; then
        branchname=${1};
    fi;
    tagname=${1};
    git fetch -vv upstream refs/tags/${tagname};
    git branch ${branchname} FETCH_HEAD;
    git checkout ${branchname}
}

clean-mysql () 
{ 
    if [ $# -ne 1 ]; then
        echo "Invalid arguments supplied: <original database name>";
        return 0;
    fi;
    mysql -uroot -pToor123# -Bse "drop database if exists ${1};create database ${1} character set utf8;";
    echo "Database ${1} recreated"
}

clean-postgre () 
{ 
    if [ $# -ne 1 ]; then
        echo "Invalid arguments supplied: <original database name>";
        return 0;
    fi;
    psql --username=postgres -c "drop database if exists ${1};";
    psql --username=postgres -c "create database ${1};";
    echo "Database {1} recreated"
}

copy-db-mysql () 
{ 
    targetdatabase="upgrade";
    if [ $# -eq 2 ]; then
        targetdatabase=${2};
    else
        if [ $# -ne 1 ]; then
            echo "Invalid arguments supplied: <original database name> [<final database name>]";
            return 0;
        fi;
    fi;
    tempfile="/tmp/${1}.sql";
    echo "Dumping [${1}] database to ${tempfile}";
    mysqldump -uroot -pToor123# ${1} > ${tempfile};
    echo "${tempfile} generated";
    mysql -uroot -pToor123# -Bse "drop database if exists ${targetdatabase};create database ${targetdatabase} character set utf8;";
    echo "Database ${targetdatabase} recreated";
    mysql ${targetdatabase} -uroot -pToor123# < ${tempfile};
    echo "Dump imported in database ${targetdatabase}";
    rm ${tempfile}
}

copy-db-postgre () 
{ 
    targetdatabase="upgrade";
    if [ $# -eq 2 ]; then
        targetdatabase=${2};
    else
        if [ $# -ne 1 ]; then
            echo "Invalid arguments supplied: <original database name> [<final database name>]";
            return 0;
        fi;
    fi;
    tempfile="/tmp/${1}.sql";
    echo "Dumping [${1}] database to ${tempfile}";
    export PGPASSWORD=postgres;
    pg_dump --username=postgres ${1} > ${tempfile};
    echo "${tempfile} generated";
    psql --username=postgres -c "drop database if exists ${targetdatabase};";
    psql --username=postgres -c "create database ${targetdatabase};";
    echo "Database {targetdatabase} recreated";
    psql --username=postgres ${targetdatabase} < ${tempfile};
    echo "Dump imported in database ${targetdatabase}";
    rm ${tempfile}
}

copy-dl () 
{ 
    targetserver="master";
    if [ $# -eq 2 ]; then
        targetserver=${2};
    else
        if [ $# -ne 1 ]; then
            echo "Invalid arguments supplied: <original server> [<final server>]";
            return 0;
        fi;
    fi;
    originalPath=/home/albertochaparro/servers/${1}/data/document_library/;
    finalPath=/home/albertochaparro/servers/${targetserver}/data/document_library/;
    rm -r ${finalPath}*;
    echo "Document library in ${finalPath} cleaned";
    cp -r ${originalPath}* ${finalPath};
    echo "Document library copied from ${originalPath} to ${finalPath}"
}

db2 () 
{ 
    DRIVERS_FOLDER=/home/albertochaparro/drivers/Db2 ${MCD_RD_CLONE_PATH}/database/db2
}

disable-mysql-log () 
{ 
    mysql -uroot -pToor123# -e "SET GLOBAL general_log = 'OFF';"
}

enable-mysql-log () 
{ 
    mysql -uroot -pToor123# -e "SET GLOBAL general_log = 'ON';"
}

git-clean-safec () 
{ 
    git clean -xdf -e "**/*.iml" -e ".gradle/gradle.properties" -e ".idea" -e ".m2" -e "app.server.$USER.properties" -e "build.$USER.properties"
}

gw () 
{ 
    $(git rev-parse --show-toplevel)/gradlew $@
}

idea-modules () 
{ 
    MODULE_GROUP=${PWD##*/};
    idea-modules-delete;
    LINE="";
    for module in */*.iml;
    do
        MODULE_PATH='$PROJECT_DIR$/../'$MODULE_GROUP'/'$module;
        LINE=$LINE'<module fileurl="file://'$MODULE_PATH'" filepath="'$MODULE_PATH'" group="'$MODULE_GROUP'" />\n';
    done;
    sed -i "/<\/modules>/i $LINE" $MODULES_FILE
}

idea-modules-delete () 
{ 
    MODULE_GROUP=${PWD##*/};
    sed -i '/^.*group="'$MODULE_GROUP'".*$/d' $MODULES_FILE
}

IJ_CLONE_PATH=/home/albertochaparro/code/liferay-intellij

ij () 
{ 
    ${IJ_CLONE_PATH}/intellij "$@"
}

import-mysql () 
{ 
    if [ $# -ne 2 ]; then
        echo "Arguments: <database_name> <file_location>";
        return 0;
    fi;
    mysql -uroot -pToor123# -Bse "drop database if exists ${1};create database ${1} character set utf8;";
    mysql -u root -pToor123# ${1} < ${2}
}

mysql7 () 
{ 
    DRIVERS_FOLDER=/home/albertochaparro/drivers ${MCD_RD_CLONE_PATH}/database/mysql
}

oracle () 
{ 
    DRIVERS_FOLDER=/home/albertochaparro/drivers/Oracle ${MCD_RD_CLONE_PATH}/database/oracle
}

pdf-grep () 
{ 
    pdfgrep ${1} ./*
}


psgrep () 
{ 
    process=tomcat;
    if [ $# -gt 0 ]; then
        if [ $# -gt 1 ]; then
            echo "Arguments: <process> - default tomcat";
            return 0;
        fi;
        process=${1};
    fi;
    ps -ef | grep --color=auto ${process}
}

rmstate () 
{ 
    server=master;
    if [ $# -gt 1 ]; then
        echo "Arguments: <server>";
        return 0;
    fi;
    if [ $# -eq 1 ]; then
        server=${1};
    fi;
    rm -r /home/albertochaparro/servers/${server}/osgi/state/*
}

rmstate72 ()
{
    rmstate 7.2
}

rmstate71 ()
{   
    rmstate 7.1 
}

rmstate70 ()
{   
    rmstate 7.0 
}

sqlserver () 
{ 
    DRIVERS_FOLDER=/home/albertochaparro/drivers/SqlServer ${MCD_RD_CLONE_PATH}/database/mssql
}

sybase () 
{ 
    DRIVERS_FOLDER=/home/albertochaparro/drivers/Sybase ${MCD_RD_CLONE_PATH}/database/sybase
}

tar-unzip () 
{ 
    if [ $# -ne 1 ]; then
        echo "Arguments: <file_location>";
        return 0;
    fi;
    tar -xzf ${1}
}

testintegration () 
{ 
    gw testIntegration --tests '$1'
}

testc () 
{ 
    if [ $# -ne 2 ]; then
        if [ $# -ne 1 ]; then
            echo "Arguments: <ClassName><DropDatabase[true|false]>";
            return 0;
        fi;
        test-class $1 false false;
        return 0;
    fi;
    if [ $2 != true ] && [ $2 != false ]; then
        echo "Second argument value must be true or false";
        return 0;
    fi;
    test-class $1 false $2
}

testd () 
{ 
    if [ $# -ne 2 ]; then
        echo "Arguments: <ClassName><DropDatabase[true|false]>";
        return 0;
    fi;
    if [ $2 != true ] && [ $2 != false ]; then
        echo "Second argument value must be true or false";
        return 0;
    fi;
    test-class $1 true $2
}

testm () 
{ 
    if [ $# -ne 3 ]; then
        echo "Arguments: <ClassName><MethodNames><Debug[true|false]>";
        return 0;
    fi;
    ant test-method -Dtest.class="$1" -Dtest.methods="$2" -Djvm.debug=$3
}

testp () 
{ 
    if [ $# -ne 2 ]; then
        if [ $# -ne 1 ]; then
            echo "Arguments: <QualifiedPackageName><DropDatabase[true|false]>";
            return 0;
        fi;
        ant test-package -Dtest.package="$1";
        return 0;
    fi;
    if [ $2 != true ] && [ $2 != false ]; then
        echo "Second argument value must be true or false";
        return 0;
    fi;
    if [ $2 = true ]; then
        db-regen lportal_test;
    fi;
    ant test-package -Dtest.package="$1"
}

upgrade () 
{ 
    port=8000;
    suspend=y;
    if [ $# -gt 0 ]; then
        if [ $# -gt 1 ]; then
            echo "Arguments: <suspend> -default yes || <port> - default 8000";
            return 0;
        fi;
        re='^[0-9]+$';
        if ! [[ ${1} =~ $re ]]; then
            suspend=${1};
        else
            port=${1};
        fi;
    fi;
    ./db_upgrade.sh -j "-Xmx3000m -Dfile.encoding=UTF8 -Duser.timezone=GMT -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=${suspend},address=${port}"
}

upgrade-shell () 
{ 
    port=8000;
    suspend=y;
    if [ $# -gt 0 ]; then
        if [ $# -gt 1 ]; then
            echo "Arguments: <suspend> -default yes || <port> - default 8000";
            return 0;
        fi;
        re='^[0-9]+$';
        if ! [[ ${1} =~ $re ]]; then
            suspend=${1};
        else
            port=${1};
        fi;
    fi;
    ./db_upgrade.sh -s -j "-Xmx3000m -Dfile.encoding=UTF8 -Duser.timezone=GMT -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=${suspend},address=${port}"
}

upgrade-debug-client () {
    java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001 -jar com.liferay.portal.tools.db.upgrade.client.jar
}

upgradeTimes () 
{ 
    UPGRADELOGFILE=$1;
    THRESHOLD=$2;
    if [ -z $UPGRADELOGFILE ] || [ -z $THRESHOLD ]; then
        echo "Usage: upgradePerformance [UPGRADE_LOG_FILE] [THRESHOLD (in ms)]";
        return;
    fi;
    grep --color=auto -P "^[0-9].*in [0-9]+ ms" $UPGRADELOGFILE | while read -r LINE; do
        TIME=$(echo ${LINE} | sed 's/.*in \([0-9]\+\) ms/\1/g');
        if [ "$TIME" -gt "$THRESHOLD" ]; then
            echo $LINE;
        fi;
    done
}

snapshot ()
{
	read -p "Enter Liferay user: " lruser
	read -p "Enter Liferay password: " -s lrpassword
	ant setup-profile-dxp
	echo "";
	echo "Cleaning snapshot bundle cache..."
	working_branch=$(grep -oP "^\s*git.working.branch.name=\K(.*)" build.properties)
	rm -rfv ${HOME}/.liferay/mirrors/files.liferay.com/private/ee/portal/snapshot-${working_branch}*
	echo "";
	echo "Executing snapshot bundle..."
	ant snapshot-bundle -Dmirrors.username=${lruser} -Dmirrors.password=${lrpassword}
}

# Updates master and rebase current branch
rebasemaster ()
{
    currentBranch=$(git rev-parse --abbrev-ref HEAD)
    git checkout master
    git pull upstream master
    git push origin master
    git checkout ${currentBranch}
    git rebase master
}

docker-dxp ()
{
    if [ $# -ne 1 ]; then
         echo "Arguments: <dxp_tag_name>";
         return 0;
    fi;

    docker run --rm -it -m 8g -p 8080:8080 --network=host -v /home/albertochaparro/docker/liferay:/mnt/liferay liferay/dxp:$1
}

sendBrian ()
{
    if [ $# -ne 1 ]; then
         echo "Arguments: <PR title>";
         return 0;
    fi;

    output=$(gh sendPortalPR achaparro Pepito -t $1 -b "" | tail -n 0)
    echo ${output}
}

check-port ()
{
    if [ $# -ne 1 ]; then
         echo "Arguments: <port>";
         return 0;
    fi;

    sudo lsof -i:$1	
}


